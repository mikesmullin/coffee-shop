// Generated by CoffeeScript 1.4.0
var Table, all, concat, sig, word, y;

module.exports = Table = (function() {

  function Table() {
    this._table = '';
    this._select = [];
    this._primary_key = 'id';
    this._select = [];
    this._join = [];
    this._where = [];
    this._group = [];
    this._having = [];
    this._order = [];
    this._limit = 0;
    this._offset = 0;
    return;
  }

  Table.prototype.table = function(_table) {
    this._table = _table;
  };

  Table.prototype.primary_key = function(_primary_key) {
    this._primary_key = _primary_key;
  };

  Table.prototype._simple = function(n) {
    return function() {
      var a, k;
      a = arguments;
      if (a.length >= 1 && all(a, 's')) {
        for (k in a) {
          if (word(a[k])) {
            a[k] = this.escape_key(a[k]);
          }
        }
        concat(this["_" + n], a);
      }
      return this;
    };
  };

  Table.prototype.select = Table.prototype._simple('select');

  Table.prototype.project = Table.prototype.select;

  Table.prototype.join = function() {
    var a, k;
    a = arguments;
    if (word(a[0]) || a.length > 1) {
      for (k in a) {
        this._join.push("JOIN " + (this.escape_key(a[k])) + "\n ON 1");
      }
    } else if (y(a[0] === 's')) {
      this._join.push(a[0]);
    }
    return this;
  };

  Table.prototype.joins = Table.prototype.join;

  Table.prototype.include = Table.prototype.join;

  Table.prototype.where = function() {
    var a, i, r, s,
      _this = this;
    a = arguments;
    s = sig(a);
    if (a.length >= 2 && all(a, 's') && a[0].indexOf('?') !== -1) {
      i = 0;
      this._where.push(a[0].replace(/\?/g, function() {
        return _this.escape(a[++i]);
      }));
    } else if (a.length >= 1 && all(a, 's')) {
      concat(this._where, a);
    } else if (s === 'o') {
      if (a[0].length === undefined) {
        r = function(o, prefix) {
          var k, _r;
          if (prefix == null) {
            prefix = '';
          }
          _r = [];
          for (k in o) {
            if (typeof o[k] === 'object') {
              concat(_r, r(o[k], "" + (_this.escape_key(k)) + "."));
            } else {
              _r.push("" + prefix + (word(k) ? _this.escape_key(k) : k) + " = " + (_this.escape(o[k])));
            }
          }
          return _r;
        };
        concat(this._where, r(a[0]));
      }
    }
    return this;
  };

  Table.prototype.group = Table.prototype._simple('group');

  Table.prototype.having = Table.prototype._simple('having');

  Table.prototype.order = Table.prototype._simple('order');

  Table.prototype.limit = function(_limit) {
    this._limit = _limit;
    return this;
  };

  Table.prototype.take = Table.prototype.limit;

  Table.prototype.offset = function(_offset) {
    this._offset = _offset;
    return this;
  };

  Table.prototype.skip = Table.prototype.offset;

  Table.prototype.escape_key = function(s) {
    return "`" + (s.toString().replace(/`/g, '')) + "`";
  };

  Table.prototype.escape = function(s) {
    if (typeof s === 'undefined' || s === null) {
      return 'NULL';
    } else {
      return "'" + s.toString().replace(/'/g, "\'") + "'";
    }
  };

  Table.prototype.toString = function() {
    return this.toSql();
  };

  Table.prototype.toSql = function() {
    return ("SELECT\n " + (this._select.join(",\n ")) + "\n") + ("FROM " + (this.escape_key(this._table)) + "\n") + this._join.join("\n") + (this._where.length ? "WHERE\n " + (this._where.join(" AND \n ")) + "\n" : '') + (this._group.length ? "GROUP BY " + (this._group.join(', ')) + "\n" : '') + (this._order.length ? "ORDER BY " + (this._order.join(', ')) + "\n" : '') + (this._having.length ? "HAVING " + (this._having.join(', ')) + "\n" : '') + (this._limit ? "LIMIT " + this._limit + "\n" : '') + (this._offset ? "OFFSET " + this._offset + "\n" : '') + ';';
  };

  return Table;

})();

y = function(v) {
  return (typeof v)[0];
};

sig = function(a) {
  var k, s;
  s = '';
  for (k in a) {
    s += y(a[k]);
  }
  return s;
};

word = function(s) {
  return y(s) === 's' && s.match(/^\w[\w\d]*$/) !== null;
};

concat = function(a, b) {
  var k;
  for (k in b) {
    a[k] = b[k];
  }
};

all = function(a, t) {
  return sig(a) === (new Array(a.length + 1)).join(t);
};
