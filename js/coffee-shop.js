// Generated by CoffeeScript 1.4.0
var CoffeeShop, all, concat, sig, sugar, word, y,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

sugar = require('sugar');

y = function(v) {
  return (typeof v)[0];
};

sig = function(a) {
  var k, s;
  s = '';
  for (k in a) {
    s += y(a[k]);
  }
  return s;
};

word = function(s) {
  return y(s) === 's' && s.match(/^\w[\w\d]*$/) !== null;
};

concat = function(a, b) {
  var k;
  for (k in b) {
    a[k] = b[k];
  }
};

all = function(a, t) {
  return sig(a) === (new Array(a.length + 1)).join(t);
};

module.exports = CoffeeShop = (function() {

  function CoffeeShop() {}

  CoffeeShop.Table = (function() {

    function _Class() {
      this._table = '';
      this._select = [];
      this._primary_key = 'id';
      this._select = [];
      this._join = [];
      this._where = [];
      this._group = [];
      this._having = [];
      this._order = [];
      this._limit = 0;
      this._offset = 0;
      return;
    }

    _Class.prototype.table = function(_table) {
      this._table = _table;
    };

    _Class.prototype.primary_key = function(_primary_key) {
      this._primary_key = _primary_key;
    };

    _Class.prototype._simple = function(n) {
      return function() {
        var a, k;
        a = arguments;
        if (a.length >= 1 && all(a, 's')) {
          for (k in a) {
            if (word(a[k])) {
              a[k] = this.escape_key(a[k]);
            }
          }
          concat(this["_" + n], a);
        }
        return this;
      };
    };

    _Class.prototype.select = _Class.prototype._simple('select');

    _Class.prototype.project = _Class.prototype.select;

    _Class.prototype.join = function() {
      var a, k;
      a = arguments;
      if (word(a[0]) || a.length > 1) {
        for (k in a) {
          this._join.push("JOIN " + (this.escape_key(a[k])) + "\n ON 1");
        }
      } else if (y(a[0] === 's')) {
        this._join.push(a[0]);
      }
      return this;
    };

    _Class.prototype.joins = _Class.prototype.join;

    _Class.prototype.include = _Class.prototype.join;

    _Class.prototype.where = function() {
      var a, i, r, s,
        _this = this;
      a = arguments;
      s = sig(a);
      if (a.length >= 2 && all(a, 's') && a[0].indexOf('?') !== -1) {
        i = 0;
        this._where.push(a[0].replace(/\?/g, function() {
          return _this.escape(a[++i]);
        }));
      } else if (a.length >= 1 && all(a, 's')) {
        concat(this._where, a);
      } else if (s === 'o') {
        if (a[0].length === undefined) {
          r = function(o, prefix) {
            var k, _r;
            if (prefix == null) {
              prefix = '';
            }
            _r = [];
            for (k in o) {
              if (typeof o[k] === 'object') {
                concat(_r, r(o[k], "" + (_this.escape_key(k)) + "."));
              } else {
                _r.push("" + prefix + (word(k) ? _this.escape_key(k) : k) + " = " + (_this.escape(o[k])));
              }
            }
            return _r;
          };
          concat(this._where, r(a[0]));
        }
      }
      return this;
    };

    _Class.prototype.group = _Class.prototype._simple('group');

    _Class.prototype.having = _Class.prototype._simple('having');

    _Class.prototype.order = _Class.prototype._simple('order');

    _Class.prototype.limit = function(_limit) {
      this._limit = _limit;
      return this;
    };

    _Class.prototype.take = _Class.prototype.limit;

    _Class.prototype.offset = function(_offset) {
      this._offset = _offset;
      return this;
    };

    _Class.prototype.skip = _Class.prototype.offset;

    _Class.prototype.escape_key = function(s) {
      return "`" + (s.replace(/`/g, '')) + "`";
    };

    _Class.prototype.escape = function(s) {
      return "'" + s.replace(/'/g, "\'") + "'";
    };

    _Class.prototype.toString = function() {
      return this.toSql();
    };

    _Class.prototype.toSql = function() {
      return ("SELECT\n " + (this._select.join(",\n ")) + "\n") + ("FROM " + (this.escape_key(this._table)) + "\n") + this._join.join("\n") + (this._where.length ? "WHERE\n " + (this._where.join(" AND \n ")) + "\n" : '') + (this._group.length ? "GROUP BY " + (this._group.join(', ')) + "\n" : '') + (this._order.length ? "ORDER BY " + (this._order.join(', ')) + "\n" : '') + (this._having.length ? "HAVING " + (this._having.join(', ')) + "\n" : '') + (this._limit ? "LIMIT " + this._limit + "\n" : '') + (this._offset ? "OFFSET " + this._offset + "\n" : '') + ';';
    };

    return _Class;

  })();

  CoffeeShop.Model = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      var k, _ref;
      _Class.__super__.constructor.call(this);
      this.table(this.constructor.name.pluralize().toLowerCase());
      this._non_attributes = {};
      for (k in _ref = '_non_attributes _table table _primary_key primary_key _simple _select select project _join join joins include _where where _group group _having having _order order _limit limit take _offset offset skip escape_key escape toString toSql _has_one has_one _has_many has_many _has_and_belongs_to_many has_and_belongs_to_many _belongs_to belongs_to attr_accessible serialize validates_presence_of execute_sql all first last find attributes save'.split(' ')) {
        this._non_attributes[_ref[k]] = true;
      }
      return;
    }

    _Class.prototype._has_one = [];

    _Class.prototype.has_one = function(s) {
      return this._has_one.push(s);
    };

    _Class.prototype.has_many = function(s) {
      return this._has_many.push(s);
    };

    _Class.prototype.has_and_belongs_to_many = function(s) {
      return this._has_and_belongs_to_many.push(s);
    };

    _Class.prototype.belongs_to = function(s) {
      return this._belongs_to.push(s);
    };

    _Class.prototype.attr_accessible = function() {};

    _Class.prototype.serialize = function() {};

    _Class.prototype.validates_presence_of = function() {};

    _Class.prototype.execute_sql = function(sql, cb) {
      return app.db.exec(sql, cb);
    };

    _Class.prototype.all = function(cb) {
      return this.execute_sql(this.toSql(), cb);
    };

    _Class.prototype.first = function(cb) {
      return this.all(function(err, results) {
        return cb(results[0]);
      });
    };

    _Class.prototype.last = function(cb) {
      return this.all(function(err, results) {
        return cb(results[results.length - 1]);
      });
    };

    _Class.prototype.find = function(id, cb) {
      this.where({
        id: id
      });
      return this.first(cb);
    };

    _Class.prototype.attributes = function() {
      var attrs, k;
      attrs = {};
      for (k in this) {
        if (typeof this._non_attributes[k] === 'undefined') {
          attrs[k] = this[k];
        }
      }
      return attrs;
    };

    _Class.prototype.save = function(cb) {
      var sql;
      sql = ("" + (this[this._primary_key] ? 'UPDATE' : 'INSERT INTO') + " " + (escape_key(this._table)) + " ") + "() VALUES\n" + " (" + this._records.join("),\n (") + ");";
      return this.execute_sql(sql, cb);
    };

    return _Class;

  })(CoffeeShop.Table);

  return CoffeeShop;

})();
